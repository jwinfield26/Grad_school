is.vector(scaleV)
M*as.vector(v)
dim(as.vector(v))
as.vector(v)%%as.vector(w)
v%%w
M + N
#part E
M - N
#part F
transposeZ <- t(Z)
transposeZ
#part G
transposeZ && Z
#part G
transposeZ %% Z
#part G
transposeZ %% Z
dim(transposeZ)
dim(Z)
transposeZ
Z
as.matrix(transposeZ)
is.matrix(transposeZ)
is.matrix(Z)
#part G
transposeZ %% Z
Z %% transposeZ
#part A
scaleV %*% scaleW
#part A
v %*% w
#part A
v %% w
#part G
transposeZ %*% Z
productZ
#part H
productZ <- tranposeZ%*%Z
#part H
productZ <- transposeZ%*%Z
productZ
View(scaleV)
dim(c)
dim(v)
dim(w)
t(v)%*%w
#part A
t(v) %*% w
diag(nrow(productZ))
#part H
productZ <- transposeZ%*%Z
diag(nrow(productZ))
#part I
transposeZ %*% Y
#part J
I <- diag(nrow(productZ))
productZ %*% I
#part K
det(productZ)
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("corrplot")
library("corrplot", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
#Problem 4
housing <- read.table("/Box Sync/DePaul/Classes/CSC 424 - Advanced Data Analysis/Homework/Assignment 1/housedata.csv", sep=",", header=TRUE)
#Problem 4
housing <- read.table("~/Box Sync/DePaul/Classes/CSC 424 - Advanced Data Analysis/Homework/Assignment 1/housedata.csv", sep=",", header=TRUE)
head(housing)
View(housing)
allVariables <- paste('price ~', paste(names(housing)[-1], collapse=' + '))
fullModel <- lm(fullModel, data="housing")
fullModel <- lm(allVariables, data=housing)
fullModel <- lm(allVariables, data="housing")
fullModel <- lm(allVariables, data=housing)
fullModel <- lm(allVariables, data=housing)
qqplot(housing$price)
qqplot(housing$price)
qqPlot(housing$price)
qqplot(housing$bedrooms)
allVariables <- paste('price ~', paste(names(housing)[-2], collapse=' + '))
allVariables
allVariables <- paste('price ~', paste(names(housing)[-3], collapse=' + '))
allVariables
allVariables <- paste('price ~', paste(names(housing)[-1], collapse=' + '))
allVariables
allVariables <- paste('price ~', paste(names(housing)[0], collapse=' + '))
allVariables
allVariables <- paste('price ~', paste(names(housing)[-1], collapse=' + '))
allVariables
allVariables <- paste('price ~', paste(names(housing)[-2], collapse=' + '))
allVariables
allVariables <- paste('price ~', paste(names(housing)[-3], collapse=' + '))
allVariables
fullModel <- lm(allVariables, data=housing)
fullModel
summary(fullModel)
corrplot(fullModel)
is.data.frame(fullModel)
as.data.frame(fullModel)
as.data.frame(allVariables)
corrplot(as.data.frame(allVariables))
qqplot(housing$price~bedroom)
qqplot(housing$price, bedroom)
qqplot(housing$price, housing$bedrooms)
cov(allVariables)
vif(fullModel)
ols_vif_tol(fullModel)
library(MASS)
library(car)
install.packages("car")
library(car)
vif(fullModel)
qqplot(fullModel)
View(scaleV)
fullModel <- lm(price ~ id + date + bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront + view + condition + grade + sqft_above + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15 + sqft_lot15, data=housing)
summary(fullModel)
vif(fullModel)
library(car)
library(MASS)
library(clusterGeneration)
library(corrplot)
install.packages("clusterGeneration")
library("clusterGeneration", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(car)
library(MASS)
library(clusterGeneration)
library(corrplot)
cor(df_fullModel)
df_fullModel <- data.frame(price, id, date, bedrooms, bathrooms, sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, lat, long, sqft_living15, sqft_lot15)
cor(df_fullModel)
df_fullModel <- data.frame(id, date, price, bedrooms, bathrooms, sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, lat, long, sqft_living15, sqft_lot15)
#fullModel <- lm(price ~ id + date + bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront + view + condition + grade + sqft_above + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15 + sqft_lot15, data=housing)
#df_fullModel <- data.frame(id, date, price, bedrooms, bathrooms, sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, lat, long, sqft_living15, sqft_lot15)
vif(allVariables)
fullModel <- lm(allVariables, data=housing)
vif(fullModel)
corr(fullModel)
#fullModel1 <- lm(price ~ id + date + bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront + view + condition + grade + sqft_above + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15 + sqft_lot15, data=housing)
df_fullModel <- data.frame(id, date, price, bedrooms, bathrooms, sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, lat, long, sqft_living15, sqft_lot15)
fullModel1 <- lm(price ~ id + date + bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront + view + condition + grade + sqft_above + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15 + sqft_lot15, data=housing)
vif(fullModel)
alias(fullModel)
fit <- lm(price ~ bedrooms + bathrooms, data=housing)
vif(fit)
vif(fullModel1)
fullModel1 <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront + view + condition + grade + sqft_above + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15 + sqft_lot15, data=housing)
vif(fullModel1)
alias(fullModel1)
fullModel <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront + view + condition + grade + sqft_above + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15 + sqft_lot15, data=housing)
vif(fullModel)
alias(fullModel)
qqplot(housing$price, housing$sqft_above)
qqplot(housing$sqft_above, housing$price)
summary(fullModel)
plot(housing$sqft_basement, housing$price)
qqplot(housing$sqft_basement, housing$price)
vif(fullModel)
alias(fullModel)
qqplot(housing$sqft_basement, housing$sqft_living)
corrplot(fullModel)
corr(fullModel)
cor(fullModel)
cor(bedrooms, bathrooms,sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, lat, long, sqft_living15, sqft_lot15)
cor(bedrooms, bathrooms,sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, lat, long, sqft_living15, sqft_lot15)
cor(bedrooms, bathrooms,sqft_living, sqft_lot, floors, waterfront)
cor(bedrooms, bathrooms, sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, lat, long, sqft_living15, sqft_lot15)
cor(bedrooms, bathrooms)
fullModel2 <- lm(price ~ bedrooms + bathrooms + sqft_lot + floors + waterfront + view + condition + grade + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15, data=housing)
vif(fullModel2)
fullModel3 <- lm(price ~ .,data=housing)
summary(fullModel3)
#Part B - 1
fit <- stepAIC(fullModel2, direction="both")
#Removed sqft_living, sqft_above, and sqft_lot15 from model
fullModel2 <- lm(price ~ bedrooms + bathrooms + sqft_lot + floors + waterfront + view + condition + grade + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15, data=housing)
#Part B - 1
fit <- stepAIC(fullModel2, direction="both")
#Part B - 1
fit <- stepAIC(fullModel2, direction="backward")
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(fullModel2, las = 1)
#Part B - 1
summary(fullModel2)
#Part B - 2
fitOther <- stepAIC(fullModel2, direction="forward")
#Part B - 2
fitOther <- stepAIC(fullModel2, direction="forward")
#Part B - 2
fitOther <- stepAIC(fullModel2, direction="backwawrd")
#Part B - 2
fitOther <- stepAIC(fullModel2, direction="backward")
#Part B - 2
fitOther <- stepAIC(fullModel2, direction="forward")
#Part B - 2
stepAIC(fullModel2, direction="forward")
#Part B - 2
step(fullModel2, direction="forward")
step(fullModel2, scope=list(lower=null, upper=full), direction="forward")
step(null, scope=list(lower=null, upper=full), direction="forward")
step(fullModel2, direction="forward")
forwaradFit <- step(null, scope = list(lower=null, upper=null), direction="forward")
forwaradFit <- step(lm(price ~ 1, data=housing), scope = list(lower=null, upper=null), direction="forward")
null <- lm(price ~ 1, data=housing)
forwaradFit <- step(null, scope = list(lower=null, upper=null), direction="forward")
forwardFit
null <- lm(price ~ 1, data=housing)
forwardSelection <- step(null, scope = list(lower=null, upper=fullModel2), direction="forward")
summary(forwardSelection)
summary(fullModel2)
view(housing)
View(housing)
scatterplot(zipcode, price)
scatterplot(housing$zipcode, housing$price)
boxplot(housing$zipcode, housing$price)
boxplot(housing$price ~ housing$zipcode)
boxplot(housing$price ~ housing$zipcode)
boxplot(housing$price ~ housing$zipcode)
boxplot(housing$price ~ housing$zipcode)
hist(housing$price)
plot(housing)
box()
#Part B - 2
null <- lm(price ~ 1, data=housing)
#Part B - 1
summary(fullModel2)
plot(housing$zipcode, housing$price)
hist(housing$zipcode
)
boxplot(housing$price)
qqplot(housing$zipcode, housing$price)
plot(housing$zipcode, housing$price)
boxplot(housing$zipcode, housing$price)
boxplot(housing$price ~ housing$price)
boxplot(housing$price ~ housing$zipcode)
library(car)
library(MASS)
housing <- read.table("~/Box Sync/DePaul/Classes/CSC 424 - Advanced Data Analysis/Homework/Assignment 1/housedata.csv", sep=",", header=TRUE)
head(housing)
#Removed sqft_living, sqft_above, and sqft_lot15 from model
fullModel2 <- lm(price ~ bedrooms + bathrooms + sqft_lot + floors + waterfront + view + condition + grade + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15, data=housing)
#Part B - 1
summary(fullModel2)
#Part B - 2
null <- lm(price ~ 1, data=housing)
forwardSelection <- step(null, scope = list(lower=null, upper=fullModel2), direction="forward")
boxplot(housing$price ~ housing$zipcode)
setwd("~/Box Sync/DePaul/Classes/CSC 424 - Advanced Data Analysis/Homework/Assignment 2")
#Load libraries
library(corrplot)
library(psych)
source("PCA_Plot.R") #Loading function found in working directory
library(ggplot2)
source("PCA_Plot.R") #Loading function found in working directory
#Problem 5
bfi <- read.csv("bfi.csv", header=T, sep=",")
head(bfi)
bfi.mod <- bfi[, 2:26]
bfi.mod.remove <- na.omit(bfi.mod) #Remove all the NAs in the dataset
complete.cases(bfi.mod.remove)
head(bfi.mod.remove)
cor(bfi.mod.remove)
corrplot(bfi.mod.remove, method=number)
corrplot(bfi.mod.remove, method="number")
corrplot(bfi.mod.remove, method="number")
corrplot(cor.bfi, method="number")
cor.bfi <- cor(bfi.mod.remove)
corrplot(cor.bfi, method="number")
corrplot(cor.bfi, method="color")
pbfi <- prcomp(bfi.mod.remove)
summary(pbfi)
#summary(pbfi)
plot(pbfi)
abline(1,0)
pbfi <- prcomp(bfi.mod.remove, center=T, scale=T)
#summary(pbfi)
plot(pbfi)
abline(1,0)
pbfi2 <- psych::principal(bfi.mod.remove, rotate = "varimax", nfactors = 6, scores=TRUE)
pbfi2
print(pbfi2$loadings, cutoff=0.4, sort=T)
pbfi <- prcomp(bfi.mod.remove, center=T)
summary(pbfi)
pbfi <- prcomp(bfi.mod.remove, center=T, scale=F)
summary(pbfi)
plot(pbfi)
abline(1,0)
View(bfi)
plot(pbfi)
pbfi2 <- psych::principal(bfi.mod.remove, rotate = "varimax", nfactors = 5, scores=TRUE)
pbfi2
print(pbfi2$loadings, cutoff=0.4, sort=T)
pbfi2 <- psych::principal(bfi.mod.remove, rotate = "varimax", nfactors = 6, scores=TRUE)
print(pbfi2$loadings, cutoff=0.4, sort=T)
pbfi2 <- psych::principal(bfi.mod.remove, rotate = "varimax", nfactors = 5, scores=TRUE)
pbfi2
print(pbfi2$loadings, cutoff=0.4, sort=T)
pbfi2$values
pbfi2$X
pbfi2$scores
pbfi2.x
pbfi2$x
pbfi2$x
pbfi$x
pbfi2$scores
#Creating and obtaining the scores for each principal component
scores_df <- data.frame(bfi.mod.remove[,1], pbfi2$scores[, 1:5])
scores_df [scores_df [1] == (min(scores_df [1))]
head(scores_df)
View(scores_df)
min(scores_df[,3])
View(scores_df[3])
View(scores_df[3])
View(scores_df)
View(scores_df[2])
something <- c("Min", "Max", min(scores_df[,2]), max(scores_df[,2]),
min(scores_df[,3]), max(scores_df[,3]),
min(scores_df[,4]), max(scores_df[,4]),
min(scores_df[,5]), max(scores_df[,5]),
min(scores_df[,6]), max(scores_df[,6]))
print(something)
something <- matrix(c("Min", "Max",
min(scores_df[,2]), max(scores_df[,2]),
min(scores_df[,3]), max(scores_df[,3]),
min(scores_df[,4]), max(scores_df[,4]),
min(scores_df[,5]), max(scores_df[,5]),
min(scores_df[,6]), max(scores_df[,6]),
ncol=2))
print(something)
something <- matrix(c("Min", "Max",
min(scores_df[,2]), max(scores_df[,2]),
min(scores_df[,3]), max(scores_df[,3]),
min(scores_df[,4]), max(scores_df[,4]),
min(scores_df[,5]), max(scores_df[,5]),
min(scores_df[,6]), max(scores_df[,6]),
nrow=2, ncol=2))
print(something)
something <- matrix(c("Min", "Max",
min(scores_df[,2]), max(scores_df[,2]),
min(scores_df[,3]), max(scores_df[,3]),
min(scores_df[,4]), max(scores_df[,4]),
min(scores_df[,5]), max(scores_df[,5]),
min(scores_df[,6]), max(scores_df[,6]))
nrow=2, ncol=2)
something <- matrix(c("Min", "Max",
min(scores_df[,2]), max(scores_df[,2]),
min(scores_df[,3]), max(scores_df[,3]),
min(scores_df[,4]), max(scores_df[,4]),
min(scores_df[,5]), max(scores_df[,5]),
min(scores_df[,6]), max(scores_df[,6])),
nrow=2, ncol=2)
print(something)
something <- matrix(c("Min", "Max",
min(scores_df[,2]), max(scores_df[,2]),
min(scores_df[,3]), max(scores_df[,3]),
min(scores_df[,4]), max(scores_df[,4]),
min(scores_df[,5]), max(scores_df[,5]),
min(scores_df[,6]), max(scores_df[,6])),
nrow=6, ncol=2)
print(something)
something <- matrix(c(min(scores_df[,2]), max(scores_df[,2]),
min(scores_df[,3]), max(scores_df[,3]),
min(scores_df[,4]), max(scores_df[,4]),
min(scores_df[,5]), max(scores_df[,5]),
min(scores_df[,6]), max(scores_df[,6])),
nrow=6, ncol=2)
print(something)
something <- matrix(c(min(scores_df[,2]), max(scores_df[,2]),
min(scores_df[,3]), max(scores_df[,3]),
min(scores_df[,4]), max(scores_df[,4]),
min(scores_df[,5]), max(scores_df[,5]),
min(scores_df[,6]), max(scores_df[,6])))
print(something)
something <- matrix(c(min(scores_df[,2]), max(scores_df[,2]),
min(scores_df[,3]), max(scores_df[,3]),
min(scores_df[,4]), max(scores_df[,4]),
min(scores_df[,5]), max(scores_df[,5]),
min(scores_df[,6]), max(scores_df[,6])), ncol=2)
print(something)
scorePC <- matrix(c(min(scores_df[,2]), max(scores_df[,2]),
min(scores_df[,3]), max(scores_df[,3]),
min(scores_df[,4]), max(scores_df[,4]),
min(scores_df[,5]), max(scores_df[,5]),
min(scores_df[,6]), max(scores_df[,6])), ncol=2)
print(scorePC)
colnames(scorePC) <- c("Min", "Max")
print(scorePC)
rownames(scorePC) <- c("PC2", "PC1", "PC3", "PC5", "PC4")
print(scorePC)
#Creating and obtaining the scores for each principal component
scores_df <- data.frame(bfi.mod.remove[,1], pbfi2$scores[, 1:5])
View(scores_df[2])
View(scores_df)
max(scores_df[,3])
min(scores_df[,2])
max(scores_df[,2])
max(scores_df[,2])
min(scores_df[,3])
max(scores_df[,3])
max(scores_df[3])
scorePC <- matrix(c(min(scores_df[2]), max(scores_df[2]),
min(scores_df[3]), max(scores_df[3]),
min(scores_df[4]), max(scores_df[4]),
min(scores_df[5]), max(scores_df[5]),
min(scores_df[6]), max(scores_df[6])), ncol=2, byrow=TRUE)
print(scorePC)
#Common Factor Analysis
fitFact <- factanal(bfi.mod.remove, 5)
print(fitFact$loadings, cutoff=.4, sort=T)
summary(fitFact)
#######################################################################################################################
#Problem 6
census <- read.csv("census2.csv", header=TRUE, sep=",")
head(census, 10)
censusMod <- census[, 2:5]
head(censusMod)
cor(censusMod)
corrplot(cor.census, method="number")
cor.census <- cor(censusMod)
corrplot(cor.census, method="number")
corrplot(cor.census, method="ellipse")
corrplot(cor.census, method="color")
corrplot(cor.census, method="number")
p.cen <- prcomp(censusMod, scale=T)
summary(p.cen)
plot(p.cen)
p.cen <- prcomp(censusMod, scale=F)
summary(p.cen)
plot(p.cen)
#Modify MedianHomeVal to be scaled down by 100,000
attach(censusMod)
censusMod$MedianHomeVal <- censusMod$MedianHomeVal/100000
detach(censusMod)
head(censusMod)
p.cen1 <- prcomp(censusMod, scale=TRUE)
summary(p.cen1)
plot(p.cen1)
p.cen <- prcomp(censusMod, scale=F)
plot(p.cen)
summary(p.cen)
cor.census <- cor(censusMod)
corrplot(cor.census, method="number")
#######################################################################################################################
#Problem 6
census <- read.csv("census2.csv", header=TRUE, sep=",")
censusMod <- census[, 2:5]
cor.census <- cor(censusMod)
corrplot(cor.census, method="number")
#######################################################################################################################
#Problem 7
doc <- read.csv("GSS_2002_Health_PCA.csv", header=T, sep=",")
head(doc, 10)
corrplot(cor.do, method="number")
corrplot(cor.doc, method="number")
cor.doc <- cor(doc)
corrplot(cor.doc, method="number")
corrplot(cor.doc, method="color")
cov(doc)
View(doc)
head(doc, 10)
head(doc, 10)
dim(doc)
head(doc1)
doc1 <- doc[2:37]
head(doc1)
head(doc)
head(doc1)
cor.doc <- cor(doc1)
corrplot(cor.doc, method="color")
p.doc <- prcomp(doc1, scale=F)
summary(doc1)
summary(p.doc)
plot(p.doc)
p.doc <- prcomp(doc1, scale=T)
summary(p.doc)
plot(p.doc)
abline(1,0)
p.doc <- prcomp(doc1, scale=T)
summary(p.doc)
plot(p.doc)
abline(1,0)
cor.doc <- cor(doc1)
corrplot(cor.doc, method="color")
#Removing variables with weak correlation
doc1.strong <- doc1[c(1:6, 13, 17:24, 26:34)]
head(doc1.strong)
#Principal Component Analysis
p.doc <- prcomp(doc1.strong, scale=T)
summary(doc1.strong)
#Principal Component Analysis
p.doc <- prcomp(doc1.strong, scale=T)
summary(p.doc)
plot(p.doc)
abline(1,0)
corrplot(cor(doc1.strong), method="color")
#Principal Component Analysis
p.doc <- prcomp(doc1.strong, scale=T)
summary(p.doc)
p.doc1 <- psych::principal(doc1.strong, rotate = "varimax", nfactors = 3, scores = T)
p.doc1
p.doc1$loadings
print(p.doc1$loadings, cutoff = 0.4, sort = T)
p.doc1$scores
plot(p.doc1$scores)
PCA_Plot(p.doc1$scores)
x <- p.doc1$scores
PCA_Plot(x)
print(p.doc1$loadings, cutoff = 0.4, sort = T)
#Common Factor Analysis
fitDoc <- factanal(doc1.strong, 5)
print(fitDoc$loadings, cutoff=.4, sort=T)
#Common Factor Analysis
fitDoc <- factanal(doc1.strong, 3)
print(fitDoc$loadings, cutoff=.4, sort=T)
