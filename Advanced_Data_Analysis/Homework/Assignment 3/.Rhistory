8 + 5
1:250
x <- 1:250
x
#Problem 2
z <- matrix(c(1,4,1,2,1,-5,1,8), ncol=2)
z
z <- matrix(c(1,1,1,1,4,2,-5,8), ncol=2)
z
y <- matrix(c(-1,1,3,2), ncol=1)
y
m <- matrix(c(1,20,0,5,10,15,0,5,5), ncol=3)
m
n <- matrix(c(-20,-5,0,0,20,5,20,10,20), ncol=3)
n
v <-  matrix(c(-4,4,8), ncol=1)
v
w <-  matrix(c(-5,-1,3), ncol=1)
w
#part A
v %% w
Z <- matrix(c(1,1,1,1,4,2,-5,8), ncol=2)
Y <- matrix(c(-1,1,3,2), ncol=1)
M <- matrix(c(1,20,0,5,10,15,0,5,5), ncol=3)
N <- matrix(c(-20,-5,0,0,20,5,20,10,20), ncol=3)
dim(M)
dim(N)
dim(v)
dim(w)
#part A
v %% w
#part B
-3 * w
#part C
M * v
v * M
#part C
M * v
M <- matrix(c(1,20,0,5,10,15,0,5,5), ncol=3)
M
dim(M)
dim(v)
M*v
is.vector(v)
scaleV <- t(v)
scaleW <- t(w)
scaleV
scaleW
#part A
scaleV %% scaleW
#part C
M * scaleV
dim(scaleV)
dim(M)
M*v
v*M
scaleV*M
M*t(v)
is.vector(scaleV)
M*as.vector(v)
dim(as.vector(v))
as.vector(v)%%as.vector(w)
v%%w
M + N
#part E
M - N
#part F
transposeZ <- t(Z)
transposeZ
#part G
transposeZ && Z
#part G
transposeZ %% Z
#part G
transposeZ %% Z
dim(transposeZ)
dim(Z)
transposeZ
Z
as.matrix(transposeZ)
is.matrix(transposeZ)
is.matrix(Z)
#part G
transposeZ %% Z
Z %% transposeZ
#part A
scaleV %*% scaleW
#part A
v %*% w
#part A
v %% w
#part G
transposeZ %*% Z
productZ
#part H
productZ <- tranposeZ%*%Z
#part H
productZ <- transposeZ%*%Z
productZ
View(scaleV)
dim(c)
dim(v)
dim(w)
t(v)%*%w
#part A
t(v) %*% w
diag(nrow(productZ))
#part H
productZ <- transposeZ%*%Z
diag(nrow(productZ))
#part I
transposeZ %*% Y
#part J
I <- diag(nrow(productZ))
productZ %*% I
#part K
det(productZ)
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("corrplot")
library("corrplot", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
#Problem 4
housing <- read.table("/Box Sync/DePaul/Classes/CSC 424 - Advanced Data Analysis/Homework/Assignment 1/housedata.csv", sep=",", header=TRUE)
#Problem 4
housing <- read.table("~/Box Sync/DePaul/Classes/CSC 424 - Advanced Data Analysis/Homework/Assignment 1/housedata.csv", sep=",", header=TRUE)
head(housing)
View(housing)
allVariables <- paste('price ~', paste(names(housing)[-1], collapse=' + '))
fullModel <- lm(fullModel, data="housing")
fullModel <- lm(allVariables, data=housing)
fullModel <- lm(allVariables, data="housing")
fullModel <- lm(allVariables, data=housing)
fullModel <- lm(allVariables, data=housing)
qqplot(housing$price)
qqplot(housing$price)
qqPlot(housing$price)
qqplot(housing$bedrooms)
allVariables <- paste('price ~', paste(names(housing)[-2], collapse=' + '))
allVariables
allVariables <- paste('price ~', paste(names(housing)[-3], collapse=' + '))
allVariables
allVariables <- paste('price ~', paste(names(housing)[-1], collapse=' + '))
allVariables
allVariables <- paste('price ~', paste(names(housing)[0], collapse=' + '))
allVariables
allVariables <- paste('price ~', paste(names(housing)[-1], collapse=' + '))
allVariables
allVariables <- paste('price ~', paste(names(housing)[-2], collapse=' + '))
allVariables
allVariables <- paste('price ~', paste(names(housing)[-3], collapse=' + '))
allVariables
fullModel <- lm(allVariables, data=housing)
fullModel
summary(fullModel)
corrplot(fullModel)
is.data.frame(fullModel)
as.data.frame(fullModel)
as.data.frame(allVariables)
corrplot(as.data.frame(allVariables))
qqplot(housing$price~bedroom)
qqplot(housing$price, bedroom)
qqplot(housing$price, housing$bedrooms)
cov(allVariables)
vif(fullModel)
ols_vif_tol(fullModel)
library(MASS)
library(car)
install.packages("car")
library(car)
vif(fullModel)
qqplot(fullModel)
View(scaleV)
fullModel <- lm(price ~ id + date + bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront + view + condition + grade + sqft_above + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15 + sqft_lot15, data=housing)
summary(fullModel)
vif(fullModel)
library(car)
library(MASS)
library(clusterGeneration)
library(corrplot)
install.packages("clusterGeneration")
library("clusterGeneration", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(car)
library(MASS)
library(clusterGeneration)
library(corrplot)
cor(df_fullModel)
df_fullModel <- data.frame(price, id, date, bedrooms, bathrooms, sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, lat, long, sqft_living15, sqft_lot15)
cor(df_fullModel)
df_fullModel <- data.frame(id, date, price, bedrooms, bathrooms, sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, lat, long, sqft_living15, sqft_lot15)
#fullModel <- lm(price ~ id + date + bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront + view + condition + grade + sqft_above + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15 + sqft_lot15, data=housing)
#df_fullModel <- data.frame(id, date, price, bedrooms, bathrooms, sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, lat, long, sqft_living15, sqft_lot15)
vif(allVariables)
fullModel <- lm(allVariables, data=housing)
vif(fullModel)
corr(fullModel)
#fullModel1 <- lm(price ~ id + date + bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront + view + condition + grade + sqft_above + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15 + sqft_lot15, data=housing)
df_fullModel <- data.frame(id, date, price, bedrooms, bathrooms, sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, lat, long, sqft_living15, sqft_lot15)
fullModel1 <- lm(price ~ id + date + bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront + view + condition + grade + sqft_above + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15 + sqft_lot15, data=housing)
vif(fullModel)
alias(fullModel)
fit <- lm(price ~ bedrooms + bathrooms, data=housing)
vif(fit)
vif(fullModel1)
fullModel1 <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront + view + condition + grade + sqft_above + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15 + sqft_lot15, data=housing)
vif(fullModel1)
alias(fullModel1)
fullModel <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + waterfront + view + condition + grade + sqft_above + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15 + sqft_lot15, data=housing)
vif(fullModel)
alias(fullModel)
qqplot(housing$price, housing$sqft_above)
qqplot(housing$sqft_above, housing$price)
summary(fullModel)
plot(housing$sqft_basement, housing$price)
qqplot(housing$sqft_basement, housing$price)
vif(fullModel)
alias(fullModel)
qqplot(housing$sqft_basement, housing$sqft_living)
corrplot(fullModel)
corr(fullModel)
cor(fullModel)
cor(bedrooms, bathrooms,sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, lat, long, sqft_living15, sqft_lot15)
cor(bedrooms, bathrooms,sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, lat, long, sqft_living15, sqft_lot15)
cor(bedrooms, bathrooms,sqft_living, sqft_lot, floors, waterfront)
cor(bedrooms, bathrooms, sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated, zipcode, lat, long, sqft_living15, sqft_lot15)
cor(bedrooms, bathrooms)
fullModel2 <- lm(price ~ bedrooms + bathrooms + sqft_lot + floors + waterfront + view + condition + grade + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15, data=housing)
vif(fullModel2)
fullModel3 <- lm(price ~ .,data=housing)
summary(fullModel3)
#Part B - 1
fit <- stepAIC(fullModel2, direction="both")
#Removed sqft_living, sqft_above, and sqft_lot15 from model
fullModel2 <- lm(price ~ bedrooms + bathrooms + sqft_lot + floors + waterfront + view + condition + grade + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15, data=housing)
#Part B - 1
fit <- stepAIC(fullModel2, direction="both")
#Part B - 1
fit <- stepAIC(fullModel2, direction="backward")
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(fullModel2, las = 1)
#Part B - 1
summary(fullModel2)
#Part B - 2
fitOther <- stepAIC(fullModel2, direction="forward")
#Part B - 2
fitOther <- stepAIC(fullModel2, direction="forward")
#Part B - 2
fitOther <- stepAIC(fullModel2, direction="backwawrd")
#Part B - 2
fitOther <- stepAIC(fullModel2, direction="backward")
#Part B - 2
fitOther <- stepAIC(fullModel2, direction="forward")
#Part B - 2
stepAIC(fullModel2, direction="forward")
#Part B - 2
step(fullModel2, direction="forward")
step(fullModel2, scope=list(lower=null, upper=full), direction="forward")
step(null, scope=list(lower=null, upper=full), direction="forward")
step(fullModel2, direction="forward")
forwaradFit <- step(null, scope = list(lower=null, upper=null), direction="forward")
forwaradFit <- step(lm(price ~ 1, data=housing), scope = list(lower=null, upper=null), direction="forward")
null <- lm(price ~ 1, data=housing)
forwaradFit <- step(null, scope = list(lower=null, upper=null), direction="forward")
forwardFit
null <- lm(price ~ 1, data=housing)
forwardSelection <- step(null, scope = list(lower=null, upper=fullModel2), direction="forward")
summary(forwardSelection)
summary(fullModel2)
view(housing)
View(housing)
scatterplot(zipcode, price)
scatterplot(housing$zipcode, housing$price)
boxplot(housing$zipcode, housing$price)
boxplot(housing$price ~ housing$zipcode)
boxplot(housing$price ~ housing$zipcode)
boxplot(housing$price ~ housing$zipcode)
boxplot(housing$price ~ housing$zipcode)
hist(housing$price)
plot(housing)
box()
#Part B - 2
null <- lm(price ~ 1, data=housing)
#Part B - 1
summary(fullModel2)
plot(housing$zipcode, housing$price)
hist(housing$zipcode
)
boxplot(housing$price)
qqplot(housing$zipcode, housing$price)
plot(housing$zipcode, housing$price)
boxplot(housing$zipcode, housing$price)
boxplot(housing$price ~ housing$price)
boxplot(housing$price ~ housing$zipcode)
library(car)
library(MASS)
housing <- read.table("~/Box Sync/DePaul/Classes/CSC 424 - Advanced Data Analysis/Homework/Assignment 1/housedata.csv", sep=",", header=TRUE)
head(housing)
#Removed sqft_living, sqft_above, and sqft_lot15 from model
fullModel2 <- lm(price ~ bedrooms + bathrooms + sqft_lot + floors + waterfront + view + condition + grade + sqft_basement + yr_built + yr_renovated + zipcode + lat + long + sqft_living15, data=housing)
#Part B - 1
summary(fullModel2)
#Part B - 2
null <- lm(price ~ 1, data=housing)
forwardSelection <- step(null, scope = list(lower=null, upper=fullModel2), direction="forward")
boxplot(housing$price ~ housing$zipcode)
#Set Working Directory
setwd("/Users/justinwinfield/Box Sync/DePaul/Classes/CSC 424 - Advanced Data Analysis/Homework/Assignment 3")
#Read table
canon <- read.table("canon.txt", header=T, sep="\t")
upcanon <- canon[,2:10]
head(upcanon)
att <- upcanon[c("esteem", "control", "attmar", "attrole")]
health <- upcanon[c("timedrs", "attdrug", "phyheal", "menheal", "druguse")]
matcor(att, health)
#Load libraries
library(ca)
library(CCA)
library(yacca)
library(MASS)
library(ggplot2)
#Read table
canon <- read.table("canon.txt", header=T, sep="\t")
upcanon <- canon[,2:10]
head(upcanon)
att <- upcanon[c("esteem", "control", "attmar", "attrole")]
health <- upcanon[c("timedrs", "attdrug", "phyheal", "menheal", "druguse")]
matcor(att, health)
ccCanon <- cc(att, health)
round(ccCanon$cor,4)
loadingCanon <- comput(att, health, ccCanon)
wilksCanon <- ccaWilks(att, health, ccCanon)
library(CCA)
library(yacca)
#Load libraries
library(ca)
wilksCanon <- ccaWilks(att, health, ccCanon)
caWilks = function(set1, set2, cca)
{
ev = ((1 - cca$cor^2))
ev
n = dim(set1)[1]
p = length(set1)
q = length(set2)
k = min(p, q)
m = n - 3/2 - (p + q)/2
m
w = rev(cumprod(rev(ev)))
# initialize
d1 = d2 = f = vector("numeric", k)
for (i in 1:k)
{
s = sqrt((p^2 * q^2 - 4)/(p^2 + q^2 - 5))
si = 1/s
d1[i] = p * q
d2[i] = m * s - p * q/2 + 1
r = (1 - w[i]^si)/w[i]^si
f[i] = r * d2[i]/d1[i]
p = p - 1
q = q - 1
}
pv = pf(f, d1, d2, lower.tail = FALSE)
dmat = cbind(WilksL = w, F = f, df1 = d1, df2 = d2, p = pv)
}
wilksCanon <- ccaWilks(att, health, ccCanon)
loadingCanon <- comput(att, health, ccCanon)
wilksCanon <- ccaWilks(att, health, ccCanon)
ccCanon <- cc(att, health)
round(ccCanon$cor,4)
loadingCanon <- comput(att, health, ccCanon)
wilksCanon <- ccaWilks(att, health, ccCanon)
ccaWilks = function(set1, set2, cca)
{
ev = ((1 - cca$cor^2))
ev
n = dim(set1)[1]
p = length(set1)
q = length(set2)
k = min(p, q)
m = n - 3/2 - (p + q)/2
m
w = rev(cumprod(rev(ev)))
# initialize
d1 = d2 = f = vector("numeric", k)
for (i in 1:k)
{
s = sqrt((p^2 * q^2 - 4)/(p^2 + q^2 - 5))
si = 1/s
d1[i] = p * q
d2[i] = m * s - p * q/2 + 1
r = (1 - w[i]^si)/w[i]^si
f[i] = r * d2[i]/d1[i]
p = p - 1
q = q - 1
}
pv = pf(f, d1, d2, lower.tail = FALSE)
dmat = cbind(WilksL = w, F = f, df1 = d1, df2 = d2, p = pv)
}
wilksCanon <- ccaWilks(att, health, ccCanon)
loadingCanon$xscores
